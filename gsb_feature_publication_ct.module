<?php
/**
 * @file
 * Code for the GSB Feature Publication Content Type feature.
 */

include_once 'gsb_feature_publication_ct.features.inc';


/**
 * Implements hook_form_FORM_ID_alter() for publication node edit form.
 */
function gsb_feature_publication_ct_form_publication_node_form_alter(&$form, &$form_state) {
  
  $language = $form['language']['#value'];

  if (!empty($form['field_program_unlimited'][$language])) {
    $form['field_program_unlimited'][$language]['#title'] .= " " . theme('form_required_marker');
  }

  // Hide alumni fields if the alumni checkbox is not checked.
  $form['field_program_unlimited']['#states']['invisible'][':input[name="field_alumni_story[' . $language . ']"]'] = array(
    array('checked' => FALSE),
  );

  // Do not show publisher or place of publication for journal articles.
  $form['field_publisher']['#states']['invisible'][':input[name="field_publication_type[' . $language . ']"]'] = array(
    array('value' => 'journal_article'),
  );
  $form['field_place_of_publication']['#states']['invisible'][':input[name="field_publication_type[' . $language . ']"]'] = array(
    array('value' => 'journal_article'),
    array('value' => 'quick_guide'),
    array('value' => 'research_spotlight'),
    array('value' => 'stanford_closer_look'),
    array('value' => 'survey'),
  );
  // Do not show volume or issue number for book chapters
  $form['field_volume_number']['#states']['invisible'][':input[name="field_publication_type[' . $language . ']"]'] = array(
    array('value' => 'book_chapter'),
    array('value' => 'quick_guide'),
    array('value' => 'research_spotlight'),
    array('value' => 'stanford_closer_look'),
    array('value' => 'survey'),
  );

  $form['field_issue_number']['#states']['invisible'][':input[name="field_publication_type[' . $language . ']"]'] = array(
    array('value' => 'book_chapter'),
    array('value' => 'quick_guide'),
    array('value' => 'research_spotlight'),
    array('value' => 'stanford_closer_look'),
    array('value' => 'survey'),
  );

  $form['field_page_count']['#states']['invisible'][':input[name="field_publication_type[' . $language . ']"]'] = array(
    array('value' => 'quick_guide'),
    array('value' => 'research_spotlight'),
    array('value' => 'stanford_closer_look'),
    array('value' => 'survey'),
  );
  
  $selected_options = array(
    'book_chapter',
    'journal_article',
    'quick_guide',
    'research_spotlight',
    'stanford_closer_look',
    'survey',
    'other_acad_publication'
  );
  $options = array();
  foreach($selected_options as $selected_option) {
    $options[$selected_option] = $form['field_publication_type']['und']['#options'][$selected_option];
  }
  $form['field_publication_type']['und']['#options'] = $options;  

  // Perform additional validation.
  $form['#validate'][] = 'gsb_feature_publication_ct_publication_node_form_validate';
}

/**
 * Validate callback for publication_node_form.
 *  - Conditionally validate alumni story fields.
 */
function gsb_feature_publication_ct_publication_node_form_validate($form, &$form_state) {
  $language = $form['language']['#value'];
  $values = $form_state['values'];

  // If Book is an alumni story we need to manually validate some required fields.
  if ($values['field_alumni_story'][$language][0]['value'] == TRUE) {

    if (empty($values['field_program_unlimited'][$language][0]['tid'])) {
      $field_label = $form['field_program_unlimited'][$language]['#title'];
      form_set_error('field_program_unlimited][und][0][tid', $field_label . ' field is required.');
    }
  }
}

/**
 * Implements hook_node_presave().
 */
function gsb_feature_publication_ct_node_presave($node) {

  // update the publication's academic area
  if (empty($node->nid) && $node->type == 'publication' && empty($node->field_academic_area_unlimited['und'])) {
    _gsb_feature_publication_ct_modify_academic_area($node);
  }
}  

/**
 * Update the publications academic area if not set with
 * the first author's academic area. 
 */
function _gsb_feature_publication_ct_update_academic_area() {

  // get list of all publications
  $query = db_select('node', 'node')
    ->fields('node')
    ->condition('type', 'publication')
    ->execute();
  $entities = $query->fetchAll();

  // loop thru the list of publications

  foreach ($entities as $info) {
    // load the publication node
    $nid = $info->nid;    
    $pub_node = node_load($nid);
    // update the publication's academic area
    _gsb_feature_publication_ct_modify_academic_area($pub_node);
    node_save($pub_node);
  }
  
}

function _gsb_feature_publication_ct_modify_academic_area(&$pub_node) {

  // check if academic area is set
  // if academic area is not set we will try to use the author's academic area

  // get the entity wrapper for the node
  $ewrap_pub = entity_metadata_wrapper('node', $pub_node);

  // get the authors info
  $authors = $ewrap_pub->field_authors->value();

  // get the first author and update the publication

  $academic_area_tids = array();

  if (!empty($authors)) {
    foreach ($authors as $author) {
      if (!empty($author->field_person_fac_single_ref['und']) && !empty($author->field_person_fac_single_ref['und'][0]['target_id'])) {

        // get author's node id
        $author_nid = $author->field_person_fac_single_ref['und'][0]['target_id'];

        // load the author node
        $author_node = node_load($author_nid);

        // update the publication with this author

        // get entity wrapper for the author node
        $ewrap_author = entity_metadata_wrapper('node', $author_node);

        // get the term for the author's academic area
        $academic_area = $ewrap_author->field_academic_area_single->value();

        if ($academic_area != null) {
          $tid = $academic_area->tid;
          $academic_area_tids[$tid] = $tid;
        }

      }
    }

    foreach($academic_area_tids as $tid) {
      $pub_node->field_academic_area_unlimited['und'][] = array('tid' => $tid);
    }    

  }

}
